# -*- coding: utf-8 -*-
"""AmesHousepricing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-UTzBwuG6WlS3q1AmBqvg0A0uvXHm7mP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import files
uploaded = files.upload()

import pandas as pd
data = pd.read_csv("AmesHousing.csv")  # Use the uploaded file name
data.head()

# Check for missing values
missing = data.isnull().sum().sort_values(ascending=False)
print(missing[missing > 0])

# View data types
data.dtypes.value_counts()

# Distribution of target variable
sns.histplot(data['SalePrice'], kde=True)
plt.title("Sale Price Distribution")
plt.show()

columns_to_drop = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']
existing_cols = [col for col in columns_to_drop if col in data.columns]
data = data.drop(columns=existing_cols)

#fill remaining missing values
for column in data.columns:
    if data[column].dtype == 'object':
        data[column] = data[column].fillna(data[column].mode()[0])
    else:
        data[column] = data[column].fillna(data[column].median())

#encode categorical features
data = pd.get_dummies(data)
print(data.shape)

#split features
X = data.drop("SalePrice", axis=1)
y = data["SalePrice"]

#train test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#feature scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

#training the model using random forest
from sklearn.ensemble import RandomForestRegressor

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

#evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np

y_pred = model.predict(X_test_scaled)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")